{"version":3,"sources":["components/Canvas.js","components/BubbleSort.js","components/InsertionSort.js","components/SelectionSort.js","components/MergeSort.js","components/HeapSort.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","React","forwardRef","props","ref","style","width","id","className","borderBottom","BubbleSort","arr","animate","canvasRef","createRef","state","this","draw","color","color2","ctx","current","getContext","canvas","height","window","innerHeight","innerWidth","length","clearRect","i","maxHeight","fillStyle","fillRect","j","temp","toggleAnimation","placeInSort","sort","setTimeout","animationStep","requestAnimationFrame","next","Component","InsertionSort","elem","SelectionSort","idx","MergeSort","size","start","mid","Math","min","end","k","l","r","leftArr","rightArr","push","HeapSort","floor","index","temp2","Header","changeColor","outline","backgroundColor","border","changeColorBegin","onClick","disabled","type","max","value","onChange","e","toggleRender","padding","borderRadius","render","App","setState","target","Array","from","random","sortAlgo","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d59c3dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Canvas = React.forwardRef((props, ref) => {\r\n\r\n  const canvasStyle = {\r\n    borderBottom: '1px solid black',\r\n  }\r\n  \r\n  const canvasContainerStyle = {\r\n    width: '100%',\r\n    'textAlign': 'center',\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={canvasContainerStyle}>\r\n      <canvas\r\n        id=\"canvas\"\r\n        className=\"canvas\" \r\n        style={canvasStyle}\r\n        ref={ref}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Canvas;","import React from 'react'\r\nimport Canvas from './Canvas'\r\n\r\nclass BubbleSort extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { arr, animate } = props;\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      arr,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n    }\r\n    \r\n  }\r\n\r\n  // passed as a prop to the Canvas component\r\n  draw(color, color2) {\r\n    const { arr } = this.props;\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.canvas.height = window.innerHeight / 1.3;\r\n    ctx.canvas.width = window.innerWidth / 1.2;\r\n\r\n    const width = ctx.canvas.width / arr.length;\r\n    const margin = 3;\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n      let height = arr[i];\r\n      const maxHeight = ctx.canvas.height - 30;\r\n\r\n      if (height > maxHeight) {\r\n        arr[i] = maxHeight;\r\n        height = arr[i];\r\n      }\r\n\r\n      if (i === color) {\r\n        ctx.fillStyle = 'blue'\r\n      }\r\n      else if (i === color2) {\r\n        ctx.fillStyle = 'red'\r\n      }\r\n      else if (color === 'done') {\r\n        ctx.fillStyle = 'green'\r\n      } else {\r\n        ctx.fillStyle = 'grey'\r\n      }\r\n      ctx.fillRect(width * i + margin, ctx.canvas.height - height, width - 2 * margin, height);\r\n    }\r\n  }\r\n\r\n\r\n  *sort() {\r\n    const { arr } = this.props;\r\n    for (let i = arr.length - 1; i >= 1; i--) {\r\n      for (let j = 0; j < i; j++) {\r\n\r\n        if (arr[j] > arr[j + 1]) {\r\n          const temp = arr[j + 1];\r\n          arr[j + 1] = arr[j];\r\n          arr[j] = temp;\r\n        }\r\n\r\n        if (i === 1) {\r\n          this.draw(j)\r\n        } else {\r\n          this.draw(j, i);\r\n        }\r\n        yield arr;\r\n      }\r\n    }\r\n    this.props.toggleAnimation();\r\n    this.draw('done');\r\n  }\r\n\r\n  animate() {\r\n    const placeInSort = this.sort();\r\n    const fps = 20000;\r\n\r\n    const animationStep = () => {\r\n      window.requestAnimationFrame(animationStep);\r\n\r\n      placeInSort.next();\r\n    }\r\n\r\n    window.setTimeout(animationStep(), 1000 * fps);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { arr } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Canvas\r\n          arr={arr}\r\n          ref={this.canvasRef}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default BubbleSort\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Canvas from './Canvas'\r\n\r\n\r\nclass InsertionSort extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    const { arr, animate } = props;\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      arr,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n\r\n    }\r\n}\r\n\r\n  // passed as a prop to the Canvas component\r\n  draw(color, color2) {\r\n    const { arr } = this.props;\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.canvas.height = window.innerHeight/1.3;\r\n    ctx.canvas.width = window.innerWidth/1.2;\r\n\r\n    const width = ctx.canvas.width/arr.length;\r\n    const margin = 3;\r\n  \r\n    ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height)\r\n  \r\n    for(let i = 0; i < arr.length; i++) {\r\n      let height = arr[i];\r\n      const maxHeight = ctx.canvas.height - 30;\r\n  \r\n      if(height > maxHeight) {\r\n        arr[i] = maxHeight;\r\n        height = arr[i];\r\n      }\r\n      \r\n      if(i === color){\r\n        ctx.fillStyle = 'blue'\r\n      }\r\n      else if(i === color2) {\r\n        ctx.fillStyle = 'red'\r\n      }\r\n      else if(color === 'done') {\r\n        ctx.fillStyle = 'green'\r\n      } else {\r\n        ctx.fillStyle = 'grey'\r\n      }\r\n\r\n      ctx.fillRect(width * i + margin, ctx.canvas.height - height, width - 2*margin, height);\r\n    }\r\n  }\r\n    \r\n\r\n  *sort() {\r\n    const { arr } = this.props;\r\n    for(let i = 1; i < arr.length; i++) {\r\n\r\n      const elem = arr[i];\r\n      let j = i - 1;\r\n\r\n      while(j >= 0 && arr[j] > elem) {\r\n        arr[j+1] = arr[j];\r\n        j--;\r\n\r\n        this.draw(j, i);\r\n        yield arr;\r\n      }\r\n\r\n      arr[j+1] = elem;\r\n      this.draw(i);\r\n      yield arr;\r\n    }\r\n    this.props.toggleAnimation();\r\n    this.draw('done');\r\n  }\r\n\r\n  animate() {\r\n    const placeInSort = this.sort();\r\n    const fps = 20000;\r\n\r\n    const animationStep = () => {\r\n      window.requestAnimationFrame(animationStep);\r\n      \r\n      placeInSort.next();\r\n    }\r\n\r\n    window.setTimeout(animationStep(), 1000*fps);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { arr } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Canvas\r\n          arr={arr}\r\n          ref={this.canvasRef}\r\n        />\r\n      </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default InsertionSort\r\n","import React from 'react'\r\nimport Canvas from './Canvas'\r\n\r\nclass SelectionSort extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { arr } = props;\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      arr,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  // passed as a prop to the Canvas component\r\n  draw(color, color2) {\r\n    const { arr } = this.props;\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.canvas.height = window.innerHeight / 1.3;\r\n    ctx.canvas.width = window.innerWidth / 1.2;\r\n\r\n    const width = ctx.canvas.width / arr.length;\r\n    const margin = 3;\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n      let height = arr[i];\r\n      const maxHeight = ctx.canvas.height - 30;\r\n\r\n      if (height > maxHeight) {\r\n        arr[i] = maxHeight;\r\n        height = arr[i];\r\n      }\r\n\r\n      if (i === color) {\r\n        ctx.fillStyle = 'blue'\r\n      }\r\n      else if (i === color2) {\r\n        ctx.fillStyle = 'red'\r\n      }\r\n      else if (color === 'done') {\r\n        ctx.fillStyle = 'green'\r\n      } else {\r\n        ctx.fillStyle = 'grey'\r\n      }\r\n      ctx.fillRect(width * i + margin, ctx.canvas.height - height, width - 2 * margin, height);\r\n    }\r\n  }\r\n\r\n\r\n  *sort() {\r\n    const { arr } = this.props;\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n      let idx = 0;\r\n\r\n      for (let j = 1; j <= i; j++) {\r\n        if (arr[j] > arr[idx]) {\r\n          idx = j\r\n        }\r\n\r\n        this.draw(j, i);\r\n        yield (arr);\r\n      }\r\n\r\n      const temp = arr[idx];\r\n      arr[idx] = arr[i];\r\n      arr[i] = temp;\r\n\r\n      this.draw(i);\r\n      yield (arr);\r\n\r\n    }\r\n\r\n    this.props.toggleAnimation();\r\n    this.draw('done');\r\n  }\r\n\r\n  animate() {\r\n    const placeInSort = this.sort();\r\n    const fps = 20000;\r\n\r\n    const animationStep = () => {\r\n      window.requestAnimationFrame(animationStep);\r\n\r\n      placeInSort.next();\r\n    }\r\n\r\n    window.setTimeout(animationStep(), 1000 * fps);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { arr } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Canvas\r\n          arr={arr}\r\n          ref={this.canvasRef}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default SelectionSort\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Canvas from './Canvas'\r\n\r\n\r\nclass MergeSort extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { arr } = props;\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      arr,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n    if(this.props.animate) {\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n    if(this.props.animate) {\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  // passed as a prop to the Canvas component\r\n  draw(color, color2) {\r\n    const { arr } = this.props;\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.canvas.height = window.innerHeight / 1.3;\r\n    ctx.canvas.width = window.innerWidth / 1.2;\r\n\r\n    const width = ctx.canvas.width / arr.length;\r\n    const margin = 3;\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n      let height = arr[i];\r\n      const maxHeight = ctx.canvas.height - 30;\r\n\r\n      if (height > maxHeight) {\r\n        arr[i] = maxHeight;\r\n        height = arr[i];\r\n      }\r\n\r\n      if (i === color) {\r\n        ctx.fillStyle = 'blue'\r\n      }\r\n      else if (i === color2) {\r\n        ctx.fillStyle = 'red'\r\n      }\r\n      else if (color === 'done') {\r\n        ctx.fillStyle = 'green'\r\n      } else {\r\n        ctx.fillStyle = 'grey'\r\n      }\r\n\r\n      ctx.fillRect(width * i + margin, ctx.canvas.height - height, width - 2 * margin, height);\r\n    }\r\n  }\r\n\r\n\r\n  *sort() {\r\n    const { arr } = this.props;\r\n    const { length } = arr;\r\n    let size;\r\n    let start;\r\n\r\n    for (size = 1; size <= length - 1; size *= 2) {\r\n      for (start = 0; start < length - 1; start += 2 * size) {\r\n        const mid = Math.min(start + size - 1, length - 1);\r\n        const end = Math.min(start + 2 * size - 1, length - 1);\r\n        let i; let j; let k;\r\n        const l = mid - start + 1;\r\n        const r = end - mid;\r\n        const leftArr = [];\r\n        const rightArr = [];\r\n\r\n        for (i = 0; i < l; i++) {\r\n          leftArr.push(arr[start + i]);\r\n        }\r\n        for (j = 0; j < r; j++) {\r\n          rightArr.push(arr[mid + 1 + j]);\r\n        }\r\n\r\n        i = 0;\r\n        j = 0;\r\n        k = start;\r\n\r\n        while (i < l && j < r) {\r\n          if (leftArr[i] <= rightArr[j]) {\r\n            arr[k] = leftArr[i];\r\n            this.draw(k);\r\n            yield;\r\n            this.draw(-5, k + 1 - 1);\r\n            yield;\r\n            i++;\r\n          } else {\r\n            arr[k] = rightArr[j];\r\n            this.draw(k);\r\n            yield;\r\n            this.draw(-5, k + j - 1);\r\n            yield;\r\n            j++;\r\n          }\r\n          k++;\r\n        }\r\n\r\n        while (i < l) {\r\n          arr[k] = leftArr[i];\r\n          this.draw(k);\r\n          yield;\r\n          this.draw(-5, k + i - 1);\r\n          yield;\r\n          i++;\r\n          k++;\r\n        }\r\n\r\n        while (j < r) {\r\n          arr[k] = rightArr[j];\r\n          this.draw(k);\r\n          yield;\r\n          this.draw(-5, k + j - 1);\r\n          yield;\r\n          j++;\r\n          k++;\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    this.props.toggleAnimation();\r\n    this.draw('done');\r\n  }\r\n\r\n  animate() {\r\n    const placeInSort = this.sort();\r\n    const fps = 20000;\r\n\r\n    const animationStep = () => {\r\n      window.requestAnimationFrame(animationStep);\r\n\r\n      placeInSort.next();\r\n    }\r\n\r\n    window.setTimeout(animationStep(), 1000 * fps);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { arr } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Canvas\r\n          arr={arr}\r\n          ref={this.canvasRef}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MergeSort\r\n","import React from 'react'\r\nimport Canvas from './Canvas'\r\n\r\nclass HeapSort extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    const { arr } = props;\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      arr,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n    if(this.props.animate){\r\n      this.animate();\r\n    }\r\n  }\r\n\r\n  // passed as a prop to the Canvas component\r\n  draw(color, color2) {\r\n    const { arr } = this.props;\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.canvas.height = window.innerHeight/1.3;\r\n    ctx.canvas.width = window.innerWidth/1.2;\r\n\r\n    const width = ctx.canvas.width/arr.length;\r\n    const margin = 3;\r\n  \r\n    ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height)\r\n  \r\n    for(let i = 0; i < arr.length; i++) {\r\n      let height = arr[i];\r\n      const maxHeight = ctx.canvas.height - 30;\r\n  \r\n      if(height > maxHeight) {\r\n        arr[i] = maxHeight;\r\n        height = arr[i];\r\n      }\r\n      \r\n      if(i === color){\r\n        ctx.fillStyle = 'blue'\r\n      }\r\n      else if(i === color2) {\r\n        ctx.fillStyle = 'red'\r\n      }\r\n      else if(color === 'done') {\r\n        ctx.fillStyle = 'green'\r\n      } else {\r\n        ctx.fillStyle = 'grey'\r\n      }\r\n      ctx.fillRect(width * i + margin, ctx.canvas.height - height, width - 2*margin, height);\r\n    }\r\n  }\r\n    \r\n\r\n  *sort() {\r\n    const { arr } = this.props;\r\n    \r\n    for(let i = 1; i < arr.length; i++) {\r\n      if(arr[i] > arr[Math.floor((i - 1)/2)]){\r\n        let j = i;\r\n\r\n        while(arr[j] > arr[Math.floor((j - 1)/2)]){\r\n          const temp = arr[j];\r\n          arr[j] = arr[Math.floor((j - 1)/2)];\r\n          arr[Math.floor((j - 1)/2)] = temp;\r\n          j = Math.floor((j - 1)/2);\r\n\r\n          this.draw(i,j);\r\n          yield;\r\n        }\r\n      }\r\n    } \r\n    \r\n    for(let i = arr.length - 1; i >= 0; i--){\r\n      const temp = arr[0];\r\n      arr[0] = arr[i];\r\n      arr[i] = temp;\r\n\r\n      this.draw(i);\r\n      yield;\r\n\r\n      let j = 0;\r\n      let index = 2 * j + 1;\r\n\r\n      while(index < i) {\r\n        index = 2 * j + 1;\r\n        if(index < (i-1) && arr[index] < arr[index + 1]){\r\n          index++;\r\n        }\r\n\r\n        if(index < i && arr[j] < arr[index]){\r\n          const temp2 = arr[j];\r\n          arr[j] = arr[index];\r\n          arr[index] = temp2;\r\n        }\r\n\r\n        this.draw(i,j);\r\n        yield;\r\n\r\n        j = index;\r\n      }\r\n\r\n\r\n    }\r\n\r\n    this.props.toggleAnimation();\r\n    this.draw('done');\r\n  }\r\n\r\n  animate() {\r\n    const placeInSort = this.sort();\r\n    const fps = 1000;\r\n\r\n    const animationStep = () => {\r\n      window.requestAnimationFrame(animationStep);\r\n      \r\n      placeInSort.next();\r\n    }\r\n\r\n    window.setTimeout(animationStep(), 1000/fps);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { arr } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Canvas\r\n          arr={arr}\r\n          ref={this.canvasRef}  \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default HeapSort\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\nclass Header extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      style: {\r\n        color: 'black'\r\n      },\r\n    }\r\n  }\r\n\r\n  changeColor = () => {\r\n    return {\r\n      outline: 'none',\r\n      color: this.props.animate ? 'black' : 'white',\r\n      backgroundColor: this.props.animate ? 'red' : 'transparent',\r\n      border: this.props.animate ? '1px solid red' : '1px solid white'\r\n    }\r\n  }\r\n\r\n  \r\n  changeColorBegin = () => {\r\n    return {\r\n      outline: 'none',\r\n      color: this.props.animate ? 'black' : 'white',\r\n      backgroundColor: this.props.animate ? 'red' : '#73B1B7',\r\n      border: this.props.animate ? '1px solid red' : '1px solid white'\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    // const {value} = this.state;\r\n\r\n    const selection = {\r\n      color: 'white',\r\n      border: '1px solid black',\r\n      backgroundColor: 'black',\r\n      padding: '.6rem',\r\n      borderRadius: '.3rem'\r\n    }\r\n\r\n    return (\r\n      <nav className=\"nav\">\r\n        <button\r\n          className='button'\r\n          onClick={() => {\r\n            this.props.onClick()}}\r\n          disabled={this.props.animate}\r\n          style={this.changeColor()}\r\n        >\r\n          Generate a new array\r\n        </button>\r\n        <input \r\n          type=\"range\"\r\n          id=\"range\"\r\n          className=\"range\"\r\n          min=\"10\"\r\n          max=\"150\"\r\n          value={this.props.value}\r\n          onChange={(e) => {this.props.onChange(e)}}\r\n          disabled={this.props.animate}\r\n        />\r\n        <button\r\n          className='button'\r\n          style={this.changeColor()}\r\n          onClick={() => {this.props.toggleRender('Bubble')}}\r\n          disabled={this.props.animate}\r\n        >\r\n          BubbleSort\r\n        </button>\r\n        <button\r\n          className='button'\r\n          style={this.changeColor()}\r\n          onClick={() => {this.props.toggleRender('Insertion')}}\r\n          disabled={this.props.animate}\r\n        >\r\n          InsertionSort\r\n        </button>\r\n        <button\r\n          className='button'\r\n          style={this.changeColor()}\r\n          onClick={() => {this.props.toggleRender('Selection')}}\r\n          disabled={this.props.animate}\r\n        >\r\n          SelectionSort\r\n        </button>\r\n        <button\r\n          className='button'\r\n          style={this.changeColor()}\r\n          onClick={() => {this.props.toggleRender('Merge')}}\r\n          disabled={this.props.animate}\r\n        >\r\n          MergeSort\r\n        </button>\r\n        <button\r\n          className='button'\r\n          style={this.changeColor()}\r\n          onClick={() => {this.props.toggleRender('Heap')}}\r\n          disabled={this.props.animate}\r\n        >\r\n          HeapSort\r\n        </button>\r\n        <button\r\n          className='button'\r\n          id='begin'\r\n          onClick={() => {this.props.toggleAnimation()}}\r\n          disabled={this.props.animate}\r\n          style={this.changeColorBegin()}\r\n        >\r\n          Begin\r\n        </button>\r\n        <p style={selection}>\r\n          Selection: {`${this.props.render} Sort`}\r\n        </p>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport './App.css';\nimport BubbleSort from './components/BubbleSort'\nimport InsertionSort from './components/InsertionSort'\nimport SelectionSort from './components/SelectionSort'\nimport MergeSort from './components/MergeSort'\nimport HeapSort from './components/HeapSort'\nimport Header from './components/Header'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: Array.from({ length: 50 }, () => Math.floor((Math.random() * (window.innerHeight / 1.3 - 30)) + 20)),\n      value: 50,\n      animate: false,\n      render: 'Bubble'\n    }\n  }\n\n  onChange = e => {\n    this.setState({\n      value: e.target.value,\n      arr: Array.from({ length: e.target.value }, () => Math.floor((Math.random() * (window.innerHeight / 1.3 - 30)) + 20)),\n    });\n  }\n\n  onClick = () => {\n    this.setState({\n      arr: Array.from({ length: this.state.arr.length}, () => Math.floor((Math.random() * (window.innerHeight / 1.3 - 30)) + 20))\n    });\n  }\n\n  toggleAnimation = () => {\n    this.setState({\n      animate: !this.state.animate,\n    });\n  }\n\n  toggleRender = r => {\n    this.setState({render: r});\n  }\n\n  render() {\n\n    let sortAlgo;\n    if(this.state.render === 'Bubble') {\n      sortAlgo = <BubbleSort\n          arr={this.state.arr}\n          toggleAnimation={this.toggleAnimation}\n          animate={this.state.animate}\n      />\n    }\n     else if(this.state.render === 'Insertion') {\n      sortAlgo = <InsertionSort\n          arr={this.state.arr}\n          toggleAnimation={this.toggleAnimation}\n          animate={this.state.animate}\n      />\n    }\n    else if(this.state.render === 'Selection') {\n      sortAlgo = <SelectionSort\n      arr={this.state.arr}\n      toggleAnimation={this.toggleAnimation}\n      animate={this.state.animate}\n  />\n    }\n    else if(this.state.render === 'Merge') {\n      sortAlgo = <MergeSort\n      arr={this.state.arr}\n      toggleAnimation={this.toggleAnimation}\n      animate={this.state.animate}\n  />\n    }\n    else if(this.state.render === 'Heap') {\n      sortAlgo = <HeapSort\n      arr={this.state.arr}\n      toggleAnimation={this.toggleAnimation}\n      animate={this.state.animate}\n  />\n    }\n\n    return (\n\n      <div>\n      <Header\n        animate={this.state.animate}\n        toggleAnimation={this.toggleAnimation}\n        onClick = {this.onClick}\n        onChange={this.onChange}\n        value={this.state.value}\n        toggleRender={this.toggleRender}\n        render={this.state.render}\n      />\n      {sortAlgo}\n      {/* <BubbleSort\n          arr={this.state.arr}\n          toggleAnimation={this.toggleAnimation}\n          animate={this.state.animate}\n        /> */}\n        {/* <InsertionSort \n          arr={arr}\n        /> */}\n        {/* <SelectionSort\n          arr={arr}\n        /> */}\n        {/* <MergeSort\n          arr={arr}\n        /> */}\n        {/* <HeapSort \n          arr={arr}\n        /> */}\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}